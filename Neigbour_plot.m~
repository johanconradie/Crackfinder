clear; 
clc;
tStart=tic;

DICdata = load('B00029(para).txt');                                        %for graphite the coords is 25, -25,25,-25); and SACAM 15, -6, 25,-25);

% [reduced_data] = DataReducer_Zero_disp_remover(DICdata, 10,-9,10,-15); 
[reduced_data] = DataReducer_Zero_disp_remover(DICdata, 15, -6, 25,-25);                    %reduce DIC data between x1,x2 and y1,y2 values of interest
                                                                           %for the B00400 series the coords 
x       = reduced_data(:,1);                                               % are between 10,-15,10,-15);
y       = reduced_data(:,2);
u_x     = reduced_data(:,3);
u_y     = reduced_data(:,4);


% figure(1)
% plot( x + u_x, y + u_y ,'rx')                                            %if the data is reduced the rows have to be counted for the damagedcoordinates function in order to plot the damage, I know it sucks, but I'm going to fix it later ;)
% % plot( u_x, u_y ,'rx') 
% hold on
% plot(x,y,'.b')

[scale_value dy] = Surface_scale_value(y)

%   HORIZON SPECIFICATION (Have to change between steel and graphite)************************************************
       
    horizon = dy*1.5;

%   NONLOCAL MESHING **********************************************************************************************    
    
[ lengths ] = NNsearch( reduced_data, horizon);                            %Nearest neighbour search, calculates bond lengths between nodes within a horizon alpha
size = length(lengths)

for i = 1:size                                                             % Adjacent matrix, 1 if in neighbourhood 0 not
    for j = 1:size
        
        if(lengths(i,j) ~= 0)
            
            adj(i,j) = 1;
        end
    end
end

current_coords = [x + u_x ,y + u_y ];

%  DEFORMATION AND BOND STRETCH ****************************************************************************

[ current_lengths ] = Currentbondlenghts( current_coords, lengths);        %determine the current lengths of the deformed bond lengths

[ stretches, bonds ] = StretchCalculator(lengths, current_lengths );       %determine the stretch of deformed bonds

%   CRITICAL STRETCH ************************************************************************************

%graphite
Elasticity = 11900000000;
poisson = 0.21
Gc = 450                    %Critical energy release rate

%steel
% Elasticity = 197000000000;
% poisson = 0.3

critical_stretch = critical_stretch(Gc, Elasticity, poisson, horizon)

% % graphite
% critical_stretch = 0.03
% 
% % steel
% % critical_stretch = 0.112
% 
%   STRAIN ENERGY************************************************************************************

[Effective_micromodulus, Effective_Elasticity, c, W, W_reduced] = Strain_Energy(stretches, lengths ,Elasticity, horizon, poisson, critical_stretch);


%   ADJECENT MATRIX FOR 1 = BONDS, MAKE 0 IF = BROKEN******************************************

for i = 1:size                                                              %adjacent matrix full 1's and zeros
    for j = 1:size
        
        if(stretches(i,j) >= critical_stretch)
            
            adj(i,j) = 0;
             adj_2(i,j) = 1;
        end
    end
end

%   BROKEN BOND PLOT THAT REVEALS CRACKS ***************************

figure
subplot(1,2,1)
[xu yu] = gplot(adj, [current_coords]);
% subplot(1, 3,3)
plot(xu, yu, '-', 'MarkerFaceColor','r')
hold on
[xu yu] = gplot(adj_2, [current_coords]);
% subplot(1, 3,3)
subplot(1,2,1)

plot(xu, yu, '-k','LineWidth',2, 'MarkerFaceColor','k')
% ('Deformed state with broken bonds','fontsize',15);    
hleg1 = legend('intact bonds','broken bonds');
ylabel('X position (mm)','fontsize',20)
xlabel('Y position (mm)','fontsize',20)

%   DAMAGE PLOT ****************************************************
% 
% [damage] = DamageCalculator(stretches, critical_stretch, bonds);                     %determine the damage by calculating Sum_broken_bonds/Sum_bonds
% [ X, Y, D] = DamagedCoordinates(damage, x, y , scale_value);                       %the output is 3 matrices to use for contour or surface plot, you need to count the rows of the original coordinates and then insert it here, currently it is 44 rows
%                                                                             % for graphite value is 64 with coords as specified above                                                                          % for steel value is 44 with coords as specified
% figure (2)
% surface(X,Y,D,'EdgeColor','none');                                                                              
% ylabel('X position (mm)','fontsize',20)
% xlabel('X position (mm)','fontsize',20)
% % axis equal                                                                            
%                                                                             
%                                                                             
% [ X, Y, D] = DamagedCoordinates(Effective_micromodulus, x, y , scale_value);         
% 
% 
% [ X, Y, Emod] = DamagedCoordinates(Effective_Elasticity, x, y , scale_value);
% 
% % for i = 1:length(Effective_micromodulus)
% %     if(Effective_micromodulus(i) ==0)
% %         plot3(x(i),y(i),Effective_micromodulus(i), '.r')
% %         hold on
% %     end
% %     if(Effective_micromodulus(i) ~= 0)
% %         plot3(x(i),y(i),Effective_micromodulus(i), 'ob')
% %         hold on
% %     end
% % end
% 
% figure (1)
% subplot(1,2,2)
% surface(X,Y,D,'EdgeColor','none');                                                                              
% % ylabel('X position (mm)','fontsize',20)
% xlabel('X position (mm)','fontsize',20)
% % axis equal
% 
% figure (3)
% surface(X,Y,Emod,'EdgeColor','none');                                                                              
% ylabel('X position (mm)','fontsize',20)
% xlabel('Y position (mm)','fontsize',20)
% 
% 
% time_seconds =toc(tStart)